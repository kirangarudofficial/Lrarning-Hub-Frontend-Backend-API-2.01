// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum LessonType {
  video
  text
  quiz
  assignment
}

// MODELS

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  name              String
  avatar            String?
  passwordHash      String? // For custom auth, not needed for providers like Auth0/Clerk
  role              Role           @default(USER)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  enrollments       Enrollment[]
  reviews           Review[]
  progress          UserProgress[]
  notes             Note[]
  instructorProfile Instructor?
}

model Instructor {
  id       String   @id @default(cuid())
  bio      String?
  rating   Float?
  students Int?

  // Relation to User (one-to-one)
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  // Relation to Courses (one-to-many)
  courses Course[]
}

model Course {
  id               String       @id @default(cuid())
  title            String
  description      String
  image            String?
  price            Float
  originalPrice    Float?
  rating           Float        @default(0)
  reviewsCount     Int          @default(0)
  duration         String?
  students         String? // Using String as in the mock data, but Int might be better
  level            CourseLevel
  category         String
  badge            String?
  whatYouWillLearn String[]
  requirements     String[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relations
  instructor   Instructor     @relation(fields: [instructorId], references: [id])
  instructorId String

  curriculum  CourseModule[]
  enrollments Enrollment[]
  reviews     Review[]
  progress    UserProgress[]
}

model CourseModule {
  id       String   @id @default(cuid())
  title    String
  duration String?

  // Relation to Course (many-to-one)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  // Relation to Lessons (one-to-many)
  lessons Lesson[]
}

model Lesson {
  id       String     @id @default(cuid())
  title    String
  duration String?
  type     LessonType
  videoUrl String?
  content  String?
  isFree   Boolean    @default(false)

  // Relation to Module (many-to-one)
  module   CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String

  // Relations
  completedBy UserProgress[]
  notes       Note[]
}

// Join table for the many-to-many relationship between User and Course
model Enrollment {
  enrolledAt DateTime @default(now())

  // Relations
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@id([userId, courseId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([userId, courseId]) // A user can only review a course once
}

model UserProgress {
  id                 String   @id @default(cuid())
  progressPercentage Float    @default(0)
  lastAccessed       DateTime @updatedAt

  // Relations
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  course           Course   @relation(fields: [courseId], references: [id])
  courseId         String
  completedLessons Lesson[] // Many-to-many relation for completed lessons

  @@unique([userId, courseId])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  timestamp Float? // Video timestamp
  createdAt DateTime @default(now())

  // Relations
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String
}